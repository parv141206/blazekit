"use client";
import Code from "@/components/Code";
import DocsContent, {
  DocsMainTitle,
  DocsTitle,
  PreviousAndNext,
} from "@/components/Docs/DocsContent";
import React from "react";

export default function FirebaseDocs() {
  return (
    <DocsContent>
      <DocsMainTitle>Firebase Firestore Support</DocsMainTitle>

      <p>
        BlazeKit can generate a complete Firebase Firestore controller for your
        models. The generated code uses the <strong>Firebase Client SDK</strong>{" "}
        (not Admin SDK) and assumes you have a Firestore instance exported as{" "}
        <code>db</code>.
      </p>

      <DocsTitle>What BlazeKit Generates</DocsTitle>
      <p>
        For each model, BlazeKit creates a Firebase Firestore controller with:
      </p>
      <ul className="list-disc pl-5">
        <li>
          <strong>Firestore Setup</strong> — Collection references and Firestore
          operations imported automatically.
        </li>
        <li>
          <strong>CRUD Functions</strong> — Create, Read, Update, and Delete
          operations for the model's collection.
        </li>
      </ul>

      <DocsTitle>Example Output</DocsTitle>
      <p>
        Suppose you have a model <code>User</code>:
      </p>

      <Code
        code={`model User {
  name: string
  email: string
  age: number
}`}
        fileName="schema.blaze"
      />

      <p>BlazeKit will generate the following Firebase Firestore controller:</p>

      <Code
        code={`// Firebase Firestore Setup (auto-generated)
import { db } from "../lib/firebase";
import {
  collection,
  doc,
  getDoc,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";
import { User } from "../types";

// CRUD Operations for User

export async function createUser(data: User) {
  const colRef = collection(db, "users");
  const docRef = await addDoc(colRef, data);
  const snapshot = await getDoc(docRef);
  return { id: docRef.id, ...snapshot.data() } as User;
}

export async function getAllUsers() {
  const colRef = collection(db, "users");
  const snapshot = await getDocs(colRef);
  return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as User[];
}

export async function getUserById(id: string) {
  const docRef = doc(db, "users", id);
  const snapshot = await getDoc(docRef);
  if (!snapshot.exists()) return null;
  return { id: snapshot.id, ...snapshot.data() } as User;
}

export async function updateUser(id: string, data: Partial<User>) {
  const docRef = doc(db, "users", id);
  await updateDoc(docRef, data);
  return getUserById(id);
}

export async function deleteUser(id: string) {
  const docRef = doc(db, "users", id);
  await deleteDoc(docRef);
  return { id };
}`}
        fileName="controllers/user.ts"
      />

      <DocsTitle>Notes</DocsTitle>
      <ul className="list-disc pl-5">
        <li>
          BlazeKit expects your Firestore instance to be exported from{" "}
          <code>lib/firebase.ts</code> (or a custom path you provide).
        </li>
        <li>
          Collection names are generated by taking the model name in lowercase
          and adding an "s" (e.g., <code>User</code> → <code>users</code>).
        </li>
        <li>
          All documents returned will include an <code>id</code> field alongside
          the document data.
        </li>
      </ul>

      <PreviousAndNext
        previous={{
          title: "MongoDB",
          path: "/docs/concepts/mongodb",
        }}
        next={{
          title: "Postgresql",
          path: "/docs/concepts/postgresql",
        }}
      />
    </DocsContent>
  );
}
